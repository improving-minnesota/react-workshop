doctype html
include ../includes/mixins

+page("Lecture 01 - Project Layout and Development Tools")
  +lecture-title-page("Project Layout and Development Tools", "Lecture 01")

  section
    h1 NPM
    p.plain
      a(href="https://www.npmjs.org") npmjs.org

  section
    p
      strong  NPM
      |  is the official package manager for Node.js

  section
    ul
      li NPM runs on the command line and manages dependencies for an application
      li It also allows users to install Node.js applications that are available on the NPM registry

  section
    pre.
      <code class="json" data-trim>
      {
        "name": "my-project",
        "version": "0.0.1",
        "description": "My Cool Node Project",
        "main": "index.js",
        "author": "Sterling Archer",
        "dependencies": {
          "grunt": "0.4.2"
        }
      }

      </code>

  section
    ul
      li When checking out a fresh project from GitHub, simply run:
        strong  'npm install'
        |  to install all the dependencies required to run the project

      li You can visit the NPM website to learn more about them

  section
    h1 Browserify
    p
      a(href="http://browserify.org/") browserify.org

  section
    ul
      li Browserify lets you require('modules') in the browser by bundling up all of your dependencies
      li We can use Node.js modules in the browser
      li No need for two different module systems anymore

  section
    pre.
      <code class="javascript" data-trim>
      var React = require('react/addons');
      var myModule = require('./modules/myModule');

      </code>
    ul
      li Browserify will read .js extensions by default
      li You can also configure it to read .jsx extensions

  section
    pre.
      <code class="json" data-trim>
      % browserify main.js

      </code>

  section
    h1 Reactify
    p
      a(href="https://github.com/andreypopp/reactify") github repo

  section
    ul
      li Browserify transform for JSX (superset of JavaScript used in React library)

  section
    pre.
      <code class="json" data-trim>
      % browserify -t reactify main.js

      </code>

  section
    h1 Gulp
    p
      a(href="http://gulpjs.com/") gulpjs.com

  section
    ul
      li The streaming build system
      li Runs tasks asynchronuously and uses streams

  section
    pre.
      <code class="javascript" data-trim>
      gulp.task('uglify', ['watchify'], function () {
        return gulp.src(dist('/js/app.js'))
          .pipe(gulp.dest(dist('/js')))
          .pipe(uglify())
          .pipe(rename({extname: '.min.js'}))
          .pipe(gulp.dest(dist('/js')))
          .pipe(livereload())
          .on('error', gutil.log.bind(gutil, 'Error during minification.'));
      });

      </code>

  section
    p.centered How do we run our tasks?
    pre.
      <code class="json" data-trim>
      gulp uglify

      </code>

  section
    pre.
      <code class="json" data-trim>
      gulp watch:dev

      </code>

    p.centered Watches our code for changes and re-runs the build

  section
    pre.
      <code class="json" data-trim>
      gulp serve:dev

      </code>

    p.centered Starts our Hapi server and serves our static content

  section
    pre.
      <code class="json" data-trim>
      gulp test

      </code>

    p.centered Runs our unit tests via the Karma test runner

  section
    h1 Hapi
    p
      a(href="http://hapijs.com/") hapijs.com

  section
    ul
      li A rich framework for building applications and services
      li Created by smart people at Walmart Labs
      li Focuses on configuration
      li Provides us with a complete backend for our lab project

  section
    h1 Mocha
    p
      a(href="http://mochajs.org/") mochajs.org

  section
    ul
      li Feature-rich JavaScript test framework running on node.js and in the browser

  section
    p BDD-style (Behavior Driven Development)

  section
    pre.
      <code class="javascript" data-trim>
      describe('when there is no message', function () {
        beforeEach(function () {
          Snackbar = require('./snackbar');
          element = TestUtils.renderIntoDocument(&lt;Snackbar /&gt;);
        });

        it('should hide the snackbar', function () {
          var div = TestUtils.findRenderedDOMComponentWithTag(element, 'div');
          expect(div.props.className).contains('hide');
        });
      });

      </code>

  section
    p Reporter in Terminal
    img(src="/react-workshop/assets/img/lecture-01/gulp.test.png")

  section
    p HTML Reporter
    img(src="/react-workshop/assets/img/lecture-01/mocha.htmlreporter.png")

  section
    h1 Chai
    p
      a(href="http://chaijs.com/") chaijs.com

  section
    ul
      li Assertion library for node and the browser that can be delightfully paired with any JavaScript testing framework

  section
    h1 Sinon
    p
      a(href="http://sinonjs.org/") sinonjs.org

  section
    ul
      li Standalone test spies, stubs and mocks for JavaScript
      li No dependencies - works with any unit testing framework

  section
    p.centered Used with sinon-chai
    pre.
      <code class="javascript" data-trim>
      spies.transitionTo = sinon.stub(element, 'transitionTo');

      expect(spies.transitionTo).to.have.been.calledWith('employees.create');

      </code>

  section
    h1 Proxyquire
    p
      a(href="https://github.com/thlorenz/proxyquire") Proxyquire Github repo

  section
    ul
      li Proxies Node's require so we can provide mock dependencies during testing while staying totally unobtrusive

  section
    pre.
      <code class="javascript" data-trim>
      proxies = {
        './employee.form': mockComponent('EmployeeForm'),
        '../../actions/employee.actions': {
          get: sinon.stub(),
          update: sinon.stub()
        },
        'react-router': {
          RouteHandler: mockComponent('RouteHandler'),
          Link: mockComponent('Link'),
          State: {
            getParams: function () {return {_id: 'abc123'}}
          }
        }
      };

      EmployeeDetail = proxyquire('./employee.detail', proxies);

      </code>

  section
    ul
      li Actually using Proxiquireify to work with Browserify
      li
        a(href="https://github.com/thlorenz/proxyquireify") Proxyquireify Github repo

  section
    h1 Karma
    p
      a(href="http://karma-runner.github.io/0.12/index.html") karma-runner.github.io

  section
    ul
      li Test runner orginally built for Angular.js
      li Runs tests in multiple browsers

  section
    ul
      li Source maps!
      li Browserify and Reactify plugins
      li Let's look at the Karma configuration

  section
    h1 Semantic UI
    p
      a(href="http://semantic-ui.com/kitchen-sink.html") kitchen sink

  section
    ul
      li Emphasizes concise HTML
      li CSS is code

  section
    h1 Less
    p
      a(href="http://lesscss.org/") lesscss.org

  section
    ul
      li Less is a CSS pre-processor, meaning that it extends the CSS language
      li It provides features that allow variables, mixins, and functions
      li Allows you to make CSS that is more maintainable, themeable and extendable

  section
    p Styles written in Less will be provided for you during the labs, but feel free to tinker as you please

  section
    h1 Project Layout

  section
    ul
      li In this training class, you'll be building a React application that tracks employee timesheets across different projects
      li To help speed things along so we can focus on the really important parts (like React/Flux), we've created the base project structure for you

  section
    p Let's take a look

  section
    h1 Lab 01
    h2.plain Application Setup
